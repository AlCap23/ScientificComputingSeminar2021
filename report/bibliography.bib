% Encoding: UTF-8

@Article{JMBezansonEtAl2015,
  author      = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
  title       = {Julia: {A} {Fresh} {Approach} to {Numerical} {Computing}},
  abstract    = {Bridging cultures that have often been distant, Julia combines expertise from the diverse fields of computer science and computational science to create a new approach to numerical computing. Julia is designed to be easy and fast. Julia questions notions generally held as "laws of nature" by practitioners of numerical computing: 1. High-level dynamic programs have to be slow. 2. One must prototype in one language and then rewrite in another language for speed or deployment, and 3. There are parts of a system for the programmer, and other parts best left untouched as they are built by the experts. We introduce the Julia programming language and its design --- a dance between specialization and abstraction. Specialization allows for custom treatment. Multiple dispatch, a technique from computer science, picks the right algorithm for the right circumstance. Abstraction, what good computation is really about, recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through another technique from computer science, generic programming. Julia shows that one can have machine performance without sacrificing human convenience.},
  annotation  = {Comment: 37 pages},
  date        = {2015-07},
  eprint      = {1411.1607},
  eprintclass = {cs},
  eprinttype  = {arxiv},
  file        = {:Bezanson2015 - Julia_ a Fresh Approach to Numerical Computing.pdf:PDF},
  keywords    = {Computer Science - Mathematical Software},
  shorttitle  = {Julia},
}

@Article{JMRackauckasNie2017,
  author       = {Rackauckas, Christopher and Nie, Qing},
  title        = {{DifferentialEquations}.jl – {A} {Performant} and {Feature}-{Rich} {Ecosystem} for {Solving} {Differential} {Equations} in {Julia}},
  issn         = {2049-9647},
  number       = {1},
  pages        = {15},
  volume       = {5},
  abstract     = {DifferentialEquations.jl is a package for solving differential equations in Julia. It covers discrete equations (function maps, discrete stochastic (Gillespie/Markov) simulations), ordinary differential equations, stochastic differential equations, algebraic differential equations, delay differential equations, hybrid differential equations, jump diffusions, and (stochastic) partial differential equations. Through extensive use of multiple dispatch, metaprogramming, plot recipes, foreign function interfaces (FFI), and call-overloading, DifferentialEquations.jl offers a unified user interface to solve and analyze various forms of differential equations while not sacrificing features or performance. Many modern features are integrated into the solvers, such as allowing arbitrary user-defined number systems for high-precision and arithmetic with physical units, built-in multithreading and parallelism, and symbolic calculation of Jacobians. Integrated into the package is an algorithm testing and benchmarking suite to both ensure accuracy and serve as an easy way for researchers to develop and distribute their own methods. Together, these features build a highly extendable suite which is feature-rich and highly performant.

Funding statement: This work was partially supported by NIH grants P50GM76516 and R01GM107264 and NSF grants DMS1562176 and DMS1161621. This material is based upon work supported by the National Science Foundation Graduate Research Fellowship under Grant No. DGE-1321846, the National Academies of Science, Engineering, and Medicine via the Ford Foundation, and the National Institutes of Health Award T32 EB009418. Its contents are solely the responsibility of the authors and do not necessarily represent the official views of the NIH.},
  copyright    = {Authors who publish with this journal agree to the following terms: Authors retain copyright and grant the journal right of first publication with the work simultaneously licensed under a Creative Commons Attribution License that allows others to share the work with an acknowledgement of the work's authorship and initial publication in this journal. Authors are able to enter into separate, additional contractual arrangements for the non-exclusive distribution of the journal's published version of the work (e.g., post it to an institutional repository or publish it in a book), with an acknowledgement of its initial publication in this journal. Authors are permitted and encouraged to post their work online (e.g., in institutional repositories or on their website) prior to and during the submission process, as it can lead to productive exchanges, as well as earlier and greater citation of published work (See The Effect of Open Access ). All third-party images reproduced on this journal are shared under Educational Fair Use. For more information on Educational Fair Use , please see this useful checklist prepared by Columbia University Libraries . All copyright of third-party content posted here for research purposes belongs to its original owners. Unless otherwise stated all references to characters and comic art presented on this journal are ©, ® or ™ of their respective owners. No challenge to any owner’s rights is intended or should be inferred.},
  date         = {2017-05},
  doi          = {10.5334/jors.151},
  file         = {:Rackauckas2017 - DifferentialEquations.jl – a Performant and Feature Rich Ecosystem for Solving Differential Equations in Julia.pdf:PDF},
  journaltitle = {Journal of Open Research Software},
  keywords     = {Julia, ordinary differential equations, stochastic differential equations, partial differential equations, multiple dispatch, metaprogramming, high-precision, multithreading},
  language     = {en},
  publisher    = {Ubiquity Press},
  urldate      = {2021-07-26},
}

@Book{JMSengupta2019,
  author    = {Sengupta, Avik},
  publisher = {Packt Publishing Ltd},
  title     = {Julia high performance : optimizations, distributed computing, multithreading, and GPU programming with Julia 1.0 and beyond},
  isbn      = {178829811X},
  date      = {2019},
  location  = {Birmingham},
}

@Book{JMKwong2020,
  author    = {Kwong, Tom},
  publisher = {Packt Publishing},
  title     = {Hands-on design patterns and best practices with Julia : proven solutions to common problems in software design for Julia 1. x},
  isbn      = {183864881X},
  date      = {2020},
  location  = {Birmingham, UK},
}

@Article{JMInnesEtAl2018,
  author        = {Michael Innes and Elliot Saba and Keno Fischer and Dhairya Gandhi and Marco Concetto Rudilosso and Neethu Mariya Joy and Tejan Karmali and Avik Pal and Viral Shah},
  title         = {Fashionable Modelling with Flux},
  volume        = {abs/1811.01457},
  archiveprefix = {arXiv},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/bib/journals/corr/abs-1811-01457},
  date          = {2018},
  eprint        = {1811.01457},
  eprinttype    = {arxiv},
  journaltitle  = {CoRR},
  timestamp     = {Thu, 22 Nov 2018 17:58:30 +0100},
}

@Article{JMInnes2018,
  author       = {Mike Innes},
  title        = {Flux: Elegant Machine Learning with Julia},
  date         = {2018},
  doi          = {10.21105/joss.00602},
  journaltitle = {Journal of Open Source Software},
}

@Article{JMTongEtAl2020,
  author       = {Tong, Zhishen and Wang, Feng and Hu, Chenyu and Wang, Jian and Han, Shensheng},
  title        = {Preconditioned generalized orthogonal matching pursuit},
  issn         = {1687-6180},
  number       = {1},
  pages        = {21},
  volume       = {2020},
  abstract     = {Recently, compressed sensing (CS) has aroused much attention for that sparse signals can be retrieved from a small set of linear samples. Algorithms for CS reconstruction can be roughly classified into two categories: (1) optimization-based algorithms and (2) greedy search ones. In this paper, we propose an algorithm called the preconditioned generalized orthogonal matching pursuit (Pre-gOMP) to promote the recovery performance. We provide a sufficient condition for exact recovery via the Pre-gOMP algorithm, which says that if the mutual coherence of the preconditioned sampling matrix Φ satisfies \$ {\textbackslash}mu (\{{\textbackslash}Phi \}) {\textless} {\textbackslash}frac \{1\}\{SK -S + 1\}, \$ then the Pre-gOMP algorithm exactly recovers any K-sparse signals from the compressed samples, where S ({\textgreater}1) is the number of indices selected in each iteration of Pre-gOMP. We also apply the Pre-gOMP algorithm to the application of ghost imaging. Our experimental results demonstrate that the Pre-gOMP can largely improve the imaging quality of ghost imaging, while boosting the imaging speed.},
  date         = {2020-05},
  doi          = {10.1186/s13634-020-00680-9},
  file         = {:https\://asp-eurasipjournals.springeropen.com/track/pdf/10.1186/s13634-020-00680-9:application/pdf},
  journaltitle = {EURASIP Journal on Advances in Signal Processing},
  keywords     = {Compressed sensing, Preconditioning, Generalized orthogonal matching pursuit, Ghost imaging, Mutual coherence},
  urldate      = {2021-07-26},
}

@Article{JMMacleodEtAl2021,
  author       = {Macleod, Duncan M. and Areeda, Joseph S. and Coughlin, Scott B. and Massinger, Thomas J. and Urban, Alexander L.},
  title        = {{GWpy}: {A} {Python} package for gravitational-wave astrophysics},
  issn         = {2352-7110},
  pages        = {100657},
  volume       = {13},
  abstract     = {GWpy is a Python software package that provides an intuitive, object-oriented interface through which to access, process, and visualise data from gravitational-wave detectors. GWpy provides a number of new utilities for studying data, as well as an improved user interface for a number of existing tools. The ease-of-use, along with extensive online documentation and examples, has resulted in widespread adoption of GWpy as a basis for Python software development in the international gravitational-wave community.},
  date         = {2021-01},
  doi          = {10.1016/j.softx.2021.100657},
  file         = {:https\://www.sciencedirect.com/science/article/pii/S2352711021000029/pdfft?md5=3fb485ff93dc1e172c3de4dbceadb16e&pid=1-s2.0-S2352711021000029-main.pdf&isDTMRedir=Y:application/pdf},
  journaltitle = {SoftwareX},
  keywords     = {Gravitational waves, Python, Software},
  language     = {en},
  shorttitle   = {{GWpy}},
  url          = {https://www.sciencedirect.com/science/article/pii/S2352711021000029},
  urldate      = {2021-07-26},
}

@Online{JMKarpinski2019,
  author       = {Stefan Karpinski},
  date         = {2019},
  organization = {Youtube},
  title        = {The Unreasonable Effectiveness of Multiple Dispatch},
  url          = {https://www.youtube.com/watch?v=kc9HwsxE1OY},
}

@Online{JMEdelman2019,
  author       = {Alan Edelman},
  date         = {2019},
  organization = {Youtube},
  title        = {A programming language to heal the planet together: Julia},
  url          = {https://youtu.be/qGW0GT1rCvs},
}

@Book{JMVanRossumDrake2009,
  author    = {Van Rossum, Guido and Drake, Fred L.},
  publisher = {CreateSpace},
  title     = {Python 3 Reference Manual},
  address   = {Scotts Valley, CA},
  isbn      = {1441412697},
  date      = {2009},
  location  = {Scotts Valley, CA},
}

% Programming Languages

@Book{JMKernighanRitchie2006,
  author = {Kernighan, Brian W and Ritchie, Dennis M},
  title  = {The C programming language},
  date   = {2006},
}

@Article{JMBackusHeising1964,
  author       = {Backus, John W and Heising, William P},
  title        = {Fortran},
  number       = {4},
  pages        = {382--385},
  date         = {1964},
  journaltitle = {IEEE Transactions on Electronic Computers},
  publisher    = {IEEE},
}

@Manual{JMRCT2016,
  title        = {R: A Language and Environment for Statistical Computing},
  author       = {{R Core Team}},
  organization = {R Foundation for Statistical Computing},
  date         = {2016},
  location     = {Vienna, Austria},
  url          = {https://www.R-project.org/},
}

@Book{JMThomasEtAl2005,
  author    = {Thomas, David and Hunt, Andrew and Fowler, Chad and others},
  publisher = {Raleigh, NC: Pragmatic Bookshelf,},
  title     = {Programming Ruby: the pragmatic programmers' guide},
  date      = {2005},
}

@Book{JMMATLAB2010,
  author    = {MATLAB},
  publisher = {The MathWorks Inc.},
  title     = {version 7.10.0 (R2010a)},
  date      = {2010},
  location  = {Natick, Massachusetts},
}

@Book{JMIerusalimschy2006,
  author    = {Ierusalimschy, Roberto},
  publisher = {Roberto Ierusalimschy},
  title     = {Programming in lua},
  date      = {2006},
}

@Book{JMStroustrup2013,
  author    = {Stroustrup, Bjarne},
  publisher = {Addison-Wesley},
  title     = {The C++ programming language},
  isbn      = {0321958322},
  date      = {2013},
  location  = {Upper Saddle River, NJ},
}

% Programming Languages

@Article{JMMeyerson2014,
  author       = {Meyerson, Jeff},
  title        = {The go programming language},
  number       = {5},
  pages        = {104--104},
  volume       = {31},
  date         = {2014},
  journaltitle = {IEEE software},
  publisher    = {IEEE},
}

@InProceedings{JMMatsakisKlockII2014,
  author       = {Matsakis, Nicholas D and Klock II, Felix S},
  booktitle    = {ACM SIGAda Ada Letters},
  title        = {The rust language},
  number       = {3},
  organization = {ACM},
  pages        = {103--104},
  volume       = {34},
  date         = {2014},
}

@InProceedings{JMLattnerAdve2004,
  author    = {Lattner, Chris and Adve, Vikram},
  booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization},
  title     = {LLVM: A Compilation Framework for Lifelong Program Analysis &amp; Transformation},
  address   = {USA},
  pages     = {75},
  publisher = {IEEE Computer Society},
  series    = {CGO '04},
  abstract  = {This paper describes LLVM (Low Level Virtual Machine),a compiler framework designed
to support transparent, lifelongprogram analysis and transformation for arbitrary
programs,by providing high-level information to compilertransformations at compile-time,
link-time, run-time, and inidle time between runs.LLVM defines a common, low-levelcode
representation in Static Single Assignment (SSA) form,with several novel features:
a simple, language-independenttype-system that exposes the primitives commonly used
toimplement high-level language features; an instruction fortyped address arithmetic;
and a simple mechanism that canbe used to implement the exception handling features
ofhigh-level languages (and setjmp/longjmp in C) uniformlyand efficiently.The LLVM
compiler framework and coderepresentation together provide a combination of key capabilitiesthat
are important for practical, lifelong analysis andtransformation of programs.To our
knowledge, no existingcompilation approach provides all these capabilities.We describethe
design of the LLVM representation and compilerframework, and evaluate the design in
three ways: (a) thesize and effectiveness of the representation, including thetype
information it provides; (b) compiler performance forseveral interprocedural problems;
and (c) illustrative examplesof the benefits LLVM provides for several challengingcompiler
problems.},
  date      = {2004},
  isbn      = {0769521029},
  location  = {Palo Alto, California},
}

@Article{JMSouzaEtAl2020,
  author     = {Souza, A. N. and Wagner, G. L. and Ramadhan, A. and Allen, B. and Churavy, V. and Schloss, J. and Campin, J. and Hill, C. and Edelman, A. and Marshall, J. and Flierl, G. and Ferrari, R.},
  journal    = {Journal of Advances in Modeling Earth Systems},
  title      = {Uncertainty {Quantification} of {Ocean} {Parameterizations}: {Application} to the {K}-{Profile}-{Parameterization} for {Penetrative} {Convection}},
  year       = {2020},
  issn       = {1942-2466},
  number     = {12},
  pages      = {e2020MS002108},
  volume     = {12},
  abstract   = {Parameterizations of unresolved turbulent processes often compromise the fidelity of large-scale ocean models. In this work, we argue for a Bayesian approach to the refinement and evaluation of turbulence parameterizations. Using an ensemble of large eddy simulations of turbulent penetrative convection in the surface boundary layer, we demonstrate the method by estimating the uncertainty of parameters in the convective limit of the popular “K-Profile Parameterization.” We uncover structural deficiencies and propose an alternative scaling that overcomes them.},
  annote     = {e2020MS002108 10.1029/2020MS002108},
  doi        = {10.1029/2020MS002108},
  file       = {Full Text PDF:https\://agupubs.onlinelibrary.wiley.com/doi/pdfdirect/10.1029/2020MS002108:application/pdf},
  language   = {en},
  shorttitle = {Uncertainty {Quantification} of {Ocean} {Parameterizations}},
  url        = {https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/2020MS002108},
  urldate    = {2021-07-29},
}

@Article{JMKalubaEtAl2021,
  author    = {Kaluba, Marek and Kielak, Dawid and Nowak, Piotr W.},
  journal   = {Annals of Mathematics},
  title     = {On property ({T}) for {Aut}({Fn}) and {SLn}(ℤ)},
  year      = {2021},
  issn      = {0003-486X},
  number    = {2},
  pages     = {539--562},
  volume    = {193},
  abstract  = {We prove that Aut(Fn) has Kazhdan's property (T) for every n ⩾ 6. Together with a previous result of Kaluba, Nowak, and Ozawa, this gives the same statement for n ⩾ 5. We also provide explicit lower bounds for the Kazhdan constants of SAut(Fn) (with n ⩾ 6) and of SLn(ℤ) (with n ⩾ 3) with respect to natural generating sets. In the latter case, these bounds improve upon previously known lower bounds whenever n {\textgreater} 6.},
  doi       = {10.4007/annals.2021.193.2.3},
  file      = {JSTOR Full Text PDF:https\://www.jstor.org/stable/pdfplus/10.4007/annals.2021.193.2.3#metadata_info_tab_contents.pdf?acceptTC=true:application/pdf},
  publisher = {[Annals of Mathematics, Trustees of Princeton University on Behalf of the Annals of Mathematics, Mathematics Department, Princeton University]},
  url       = {https://www.jstor.org/stable/10.4007/annals.2021.193.2.3},
  urldate   = {2021-07-29},
}

@InProceedings{JMForetsEtAl2020,
  author    = {Forets, Marcelo and Freire, Daniel and Schilling, Christian},
  booktitle = {2020 18th {ACM}-{IEEE} {International} {Conference} on {Formal} {Methods} and {Models} for {System} {Design} ({MEMOCODE})},
  title     = {Efficient reachability analysis of parametric linear hybrid systems with time-triggered transitions},
  pages     = {1--6},
  abstract  = {Efficiently handling time-triggered and possibly nondeterministic switches for hybrid systems reachability is a challenging task. In this paper we focus on periodically controlled systems with fast-switching controller dynamics, which often require simulation time scales of the order of nanoseconds. Accurate set-based computations for such systems with relatively large time horizons are expensive due to the accumulation of errors in the discrete transitions. We present an approach based on conservative set-based enclosure of the dynamics that can handle systems with uncertain parameters and inputs. We demonstrate our algorithm on the plant model of an experimental electro-mechanical braking system with periodic controller.},
  date      = {2020-12},
  doi       = {10.1109/MEMOCODE51338.2020.9314994},
  keywords  = {Clocks, Heuristic algorithms, Automata, Computational modeling, Brakes, Linear systems, PI control, Hybrid system, Reachability, Periodic controller},
}

@Article{JMJarlebring2019,
  author  = {Jarlebring, Elias},
  journal = {SIAM Journal on Scientific Computing},
  title   = {Broyden's Method for Nonlinear Eigenproblems},
  year    = {2019},
  number  = {2},
  pages   = {A989-A1012},
  volume  = {41},
  doi     = {10.1137/18M1173150},
  eprint  = {https://doi.org/10.1137/18M1173150},
  url     = {https://doi.org/10.1137/18M1173150},
}

@InProceedings{JMKoolenDeits2019,
  author     = {Koolen, Twan and Deits, Robin},
  booktitle  = {2019 {International} {Conference} on {Robotics} and {Automation} ({ICRA})},
  title      = {Julia for robotics: simulation and real-time control in a high-level programming language},
  note       = {ISSN: 2577-087X},
  pages      = {604--611},
  abstract   = {Robotics applications often suffer from the `two-language problem', requiring a low-level language for performance-sensitive components and a high-level language for interactivity and experimentation, which tends to increase software complexity. We demonstrate the use of the Julia programming language to solve this problem by being fast enough for online control of a humanoid robot and flexible enough for prototyping. We present several Julia packages developed by the authors, which together enable roughly 2× realtime simulation of the Boston Dynamics Atlas humanoid robot balancing on flat ground using a quadratic-programming-based controller. Benchmarks show a sufficiently low variation in control frequency to make deployment on the physical robot feasible. We also show that Julia's naturally generic programming style results in versatile packages that are easy to compose and adapt to a wide variety of computational tasks in robotics.},
  date       = {2019-05},
  doi        = {10.1109/ICRA.2019.8793875},
  issn       = {2577-087X},
  keywords   = {Robots, Libraries, Software packages, C++ languages, Productivity, Resource management},
  shorttitle = {Julia for robotics},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: keypatterndefault:JM:[authEtAl][YEAR];}
