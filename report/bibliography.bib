% Encoding: UTF-8

@Article{JMBezansonEtAl2015,
  author     = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
  journal    = {arXiv:1411.1607 [cs]},
  title      = {Julia: {A} {Fresh} {Approach} to {Numerical} {Computing}},
  year       = {2015},
  month      = jul,
  note       = {arXiv: 1411.1607},
  abstract   = {Bridging cultures that have often been distant, Julia combines expertise from the diverse fields of computer science and computational science to create a new approach to numerical computing. Julia is designed to be easy and fast. Julia questions notions generally held as "laws of nature" by practitioners of numerical computing: 1. High-level dynamic programs have to be slow. 2. One must prototype in one language and then rewrite in another language for speed or deployment, and 3. There are parts of a system for the programmer, and other parts best left untouched as they are built by the experts. We introduce the Julia programming language and its design --- a dance between specialization and abstraction. Specialization allows for custom treatment. Multiple dispatch, a technique from computer science, picks the right algorithm for the right circumstance. Abstraction, what good computation is really about, recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through another technique from computer science, generic programming. Julia shows that one can have machine performance without sacrificing human convenience.},
  annote     = {Comment: 37 pages},
  file       = {:Bezanson2015 - Julia_ a Fresh Approach to Numerical Computing.pdf:PDF},
  keywords   = {Computer Science - Mathematical Software},
  shorttitle = {Julia},
  url        = {http://arxiv.org/abs/1411.1607},
  urldate    = {2021-07-26},
}

@Article{JMRackauckasNie2017,
  author    = {Rackauckas, Christopher and Nie, Qing},
  journal   = {Journal of Open Research Software},
  title     = {{DifferentialEquations}.jl – {A} {Performant} and {Feature}-{Rich} {Ecosystem} for {Solving} {Differential} {Equations} in {Julia}},
  year      = {2017},
  issn      = {2049-9647},
  month     = may,
  number    = {1},
  pages     = {15},
  volume    = {5},
  abstract  = {DifferentialEquations.jl is a package for solving differential equations in Julia. It covers discrete equations (function maps, discrete stochastic (Gillespie/Markov) simulations), ordinary differential equations, stochastic differential equations, algebraic differential equations, delay differential equations, hybrid differential equations, jump diffusions, and (stochastic) partial differential equations. Through extensive use of multiple dispatch, metaprogramming, plot recipes, foreign function interfaces (FFI), and call-overloading, DifferentialEquations.jl offers a unified user interface to solve and analyze various forms of differential equations while not sacrificing features or performance. Many modern features are integrated into the solvers, such as allowing arbitrary user-defined number systems for high-precision and arithmetic with physical units, built-in multithreading and parallelism, and symbolic calculation of Jacobians. Integrated into the package is an algorithm testing and benchmarking suite to both ensure accuracy and serve as an easy way for researchers to develop and distribute their own methods. Together, these features build a highly extendable suite which is feature-rich and highly performant.

Funding statement: This work was partially supported by NIH grants P50GM76516 and R01GM107264 and NSF grants DMS1562176 and DMS1161621. This material is based upon work supported by the National Science Foundation Graduate Research Fellowship under Grant No. DGE-1321846, the National Academies of Science, Engineering, and Medicine via the Ford Foundation, and the National Institutes of Health Award T32 EB009418. Its contents are solely the responsibility of the authors and do not necessarily represent the official views of the NIH.},
  copyright = {Authors who publish with this journal agree to the following terms: Authors retain copyright and grant the journal right of first publication with the work simultaneously licensed under a Creative Commons Attribution License that allows others to share the work with an acknowledgement of the work's authorship and initial publication in this journal. Authors are able to enter into separate, additional contractual arrangements for the non-exclusive distribution of the journal's published version of the work (e.g., post it to an institutional repository or publish it in a book), with an acknowledgement of its initial publication in this journal. Authors are permitted and encouraged to post their work online (e.g., in institutional repositories or on their website) prior to and during the submission process, as it can lead to productive exchanges, as well as earlier and greater citation of published work (See The Effect of Open Access ). All third-party images reproduced on this journal are shared under Educational Fair Use. For more information on Educational Fair Use , please see this useful checklist prepared by Columbia University Libraries . All copyright of third-party content posted here for research purposes belongs to its original owners. Unless otherwise stated all references to characters and comic art presented on this journal are ©, ® or ™ of their respective owners. No challenge to any owner’s rights is intended or should be inferred.},
  doi       = {10.5334/jors.151},
  file      = {:Rackauckas2017 - DifferentialEquations.jl – a Performant and Feature Rich Ecosystem for Solving Differential Equations in Julia.pdf:PDF},
  keywords  = {Julia, ordinary differential equations, stochastic differential equations, partial differential equations, multiple dispatch, metaprogramming, high-precision, multithreading},
  language  = {en},
  publisher = {Ubiquity Press},
  url       = {http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/},
  urldate   = {2021-07-26},
}

@Book{JMSengupta2019,
  author    = {Sengupta, Avik},
  publisher = {Packt Publishing Ltd},
  title     = {Julia high performance : optimizations, distributed computing, multithreading, and GPU programming with Julia 1.0 and beyond},
  year      = {2019},
  address   = {Birmingham},
  isbn      = {178829811X},
}

@Book{JMKwong2020,
  author    = {Kwong, Tom},
  publisher = {Packt Publishing},
  title     = {Hands-on design patterns and best practices with Julia : proven solutions to common problems in software design for Julia 1. x},
  year      = {2020},
  address   = {Birmingham, UK},
  isbn      = {183864881X},
}

@Article{JMInnesEtAl2018,
  author        = {Michael Innes and Elliot Saba and Keno Fischer and Dhairya Gandhi and Marco Concetto Rudilosso and Neethu Mariya Joy and Tejan Karmali and Avik Pal and Viral Shah},
  journal       = {CoRR},
  title         = {Fashionable Modelling with Flux},
  year          = {2018},
  volume        = {abs/1811.01457},
  archiveprefix = {arXiv},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/bib/journals/corr/abs-1811-01457},
  eprint        = {1811.01457},
  timestamp     = {Thu, 22 Nov 2018 17:58:30 +0100},
  url           = {https://arxiv.org/abs/1811.01457},
}

@Article{JMInnes2018,
  author  = {Mike Innes},
  journal = {Journal of Open Source Software},
  title   = {Flux: Elegant Machine Learning with Julia},
  year    = {2018},
  doi     = {10.21105/joss.00602},
}

@Article{JMTongEtAl2020,
  author   = {Tong, Zhishen and Wang, Feng and Hu, Chenyu and Wang, Jian and Han, Shensheng},
  journal  = {EURASIP Journal on Advances in Signal Processing},
  title    = {Preconditioned generalized orthogonal matching pursuit},
  year     = {2020},
  issn     = {1687-6180},
  month    = may,
  number   = {1},
  pages    = {21},
  volume   = {2020},
  abstract = {Recently, compressed sensing (CS) has aroused much attention for that sparse signals can be retrieved from a small set of linear samples. Algorithms for CS reconstruction can be roughly classified into two categories: (1) optimization-based algorithms and (2) greedy search ones. In this paper, we propose an algorithm called the preconditioned generalized orthogonal matching pursuit (Pre-gOMP) to promote the recovery performance. We provide a sufficient condition for exact recovery via the Pre-gOMP algorithm, which says that if the mutual coherence of the preconditioned sampling matrix Φ satisfies \$ {\textbackslash}mu (\{{\textbackslash}Phi \}) {\textless} {\textbackslash}frac \{1\}\{SK -S + 1\}, \$ then the Pre-gOMP algorithm exactly recovers any K-sparse signals from the compressed samples, where S ({\textgreater}1) is the number of indices selected in each iteration of Pre-gOMP. We also apply the Pre-gOMP algorithm to the application of ghost imaging. Our experimental results demonstrate that the Pre-gOMP can largely improve the imaging quality of ghost imaging, while boosting the imaging speed.},
  doi      = {10.1186/s13634-020-00680-9},
  file     = {Full Text PDF:https\://asp-eurasipjournals.springeropen.com/track/pdf/10.1186/s13634-020-00680-9:application/pdf},
  keywords = {Compressed sensing, Preconditioning, Generalized orthogonal matching pursuit, Ghost imaging, Mutual coherence},
  url      = {https://doi.org/10.1186/s13634-020-00680-9},
  urldate  = {2021-07-26},
}

@Article{JMMacleodEtAl2021,
  author     = {Macleod, Duncan M. and Areeda, Joseph S. and Coughlin, Scott B. and Massinger, Thomas J. and Urban, Alexander L.},
  journal    = {SoftwareX},
  title      = {{GWpy}: {A} {Python} package for gravitational-wave astrophysics},
  year       = {2021},
  issn       = {2352-7110},
  month      = jan,
  pages      = {100657},
  volume     = {13},
  abstract   = {GWpy is a Python software package that provides an intuitive, object-oriented interface through which to access, process, and visualise data from gravitational-wave detectors. GWpy provides a number of new utilities for studying data, as well as an improved user interface for a number of existing tools. The ease-of-use, along with extensive online documentation and examples, has resulted in widespread adoption of GWpy as a basis for Python software development in the international gravitational-wave community.},
  doi        = {10.1016/j.softx.2021.100657},
  file       = {:https\://www.sciencedirect.com/science/article/pii/S2352711021000029/pdfft?md5=3fb485ff93dc1e172c3de4dbceadb16e&pid=1-s2.0-S2352711021000029-main.pdf&isDTMRedir=Y:application/pdf},
  keywords   = {Gravitational waves, Python, Software},
  language   = {en},
  shorttitle = {{GWpy}},
  url        = {https://www.sciencedirect.com/science/article/pii/S2352711021000029},
  urldate    = {2021-07-26},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: keypatterndefault:JM:[authEtAl][YEAR];}
